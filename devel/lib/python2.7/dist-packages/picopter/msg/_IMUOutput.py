# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from picopter/IMUOutput.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMUOutput(genpy.Message):
  _md5sum = "f03e5464fec14a666cf3eccb3ae01be0"
  _type = "picopter/IMUOutput"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 time
float64 accel_x
float64 accel_y
float64 accel_z
float64 gyro_x
float64 gyro_y
float64 gyro_z
"""
  __slots__ = ['time','accel_x','accel_y','accel_z','gyro_x','gyro_y','gyro_z']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,accel_x,accel_y,accel_z,gyro_x,gyro_y,gyro_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUOutput, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.accel_x is None:
        self.accel_x = 0.
      if self.accel_y is None:
        self.accel_y = 0.
      if self.accel_z is None:
        self.accel_z = 0.
      if self.gyro_x is None:
        self.gyro_x = 0.
      if self.gyro_y is None:
        self.gyro_y = 0.
      if self.gyro_z is None:
        self.gyro_z = 0.
    else:
      self.time = 0.
      self.accel_x = 0.
      self.accel_y = 0.
      self.accel_z = 0.
      self.gyro_x = 0.
      self.gyro_y = 0.
      self.gyro_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.time, _x.accel_x, _x.accel_y, _x.accel_z, _x.gyro_x, _x.gyro_y, _x.gyro_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.time, _x.accel_x, _x.accel_y, _x.accel_z, _x.gyro_x, _x.gyro_y, _x.gyro_z,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.time, _x.accel_x, _x.accel_y, _x.accel_z, _x.gyro_x, _x.gyro_y, _x.gyro_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.time, _x.accel_x, _x.accel_y, _x.accel_z, _x.gyro_x, _x.gyro_y, _x.gyro_z,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
