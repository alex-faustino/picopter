// Generated by gencpp from file picopter/IMUOutput.msg
// DO NOT EDIT!


#ifndef PICOPTER_MESSAGE_IMUOUTPUT_H
#define PICOPTER_MESSAGE_IMUOUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace picopter
{
template <class ContainerAllocator>
struct IMUOutput_
{
  typedef IMUOutput_<ContainerAllocator> Type;

  IMUOutput_()
    : time(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)  {
    }
  IMUOutput_(const ContainerAllocator& _alloc)
    : time(0.0)
    , accel_x(0.0)
    , accel_y(0.0)
    , accel_z(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef double _accel_x_type;
  _accel_x_type accel_x;

   typedef double _accel_y_type;
  _accel_y_type accel_y;

   typedef double _accel_z_type;
  _accel_z_type accel_z;

   typedef double _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef double _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef double _gyro_z_type;
  _gyro_z_type gyro_z;





  typedef boost::shared_ptr< ::picopter::IMUOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::picopter::IMUOutput_<ContainerAllocator> const> ConstPtr;

}; // struct IMUOutput_

typedef ::picopter::IMUOutput_<std::allocator<void> > IMUOutput;

typedef boost::shared_ptr< ::picopter::IMUOutput > IMUOutputPtr;
typedef boost::shared_ptr< ::picopter::IMUOutput const> IMUOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::picopter::IMUOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::picopter::IMUOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace picopter

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'picopter': ['/home/pi/picopter/src/picopter/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::picopter::IMUOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::picopter::IMUOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::picopter::IMUOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::picopter::IMUOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::picopter::IMUOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::picopter::IMUOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::picopter::IMUOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f03e5464fec14a666cf3eccb3ae01be0";
  }

  static const char* value(const ::picopter::IMUOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf03e5464fec14a66ULL;
  static const uint64_t static_value2 = 0x6cf3eccb3ae01be0ULL;
};

template<class ContainerAllocator>
struct DataType< ::picopter::IMUOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "picopter/IMUOutput";
  }

  static const char* value(const ::picopter::IMUOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::picopter::IMUOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n\
float64 accel_x\n\
float64 accel_y\n\
float64 accel_z\n\
float64 gyro_x\n\
float64 gyro_y\n\
float64 gyro_z\n\
";
  }

  static const char* value(const ::picopter::IMUOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::picopter::IMUOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.accel_x);
      stream.next(m.accel_y);
      stream.next(m.accel_z);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMUOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::picopter::IMUOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::picopter::IMUOutput_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "accel_x: ";
    Printer<double>::stream(s, indent + "  ", v.accel_x);
    s << indent << "accel_y: ";
    Printer<double>::stream(s, indent + "  ", v.accel_y);
    s << indent << "accel_z: ";
    Printer<double>::stream(s, indent + "  ", v.accel_z);
    s << indent << "gyro_x: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICOPTER_MESSAGE_IMUOUTPUT_H
